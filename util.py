"""
Each keyfile contains:
- a human-readable warning not to modify it,
- a label representing the key,
- a base-64 encoded salt,
- a single encrypted key.

The encrypted key is a base-64 encoded string that is encrypted with
Fernet. When decoded and decrypted, it gives the base-32 setup key
corresponding to the label.

The encryption password is generated from the unique PIN entered
by the user during app startup, and the salt given in the key file.
"""
from typing import Tuple, Dict
from pathlib import Path

from cryptography.fernet import Fernet, InvalidToken, InvalidSignature
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from uuid import uuid4
from base64 import urlsafe_b64encode, urlsafe_b64decode
from os import urandom

KEYDIR = Path(__file__).parent.joinpath("keys")
WARNING = "This keyfile is auto-generated by util.py. Do not modify this keyfile."


class KeyFileError(Exception):
    """
    Denotes an error parsing a keyfile.
    """
    def __init__(self, msg: str = ""):
        super().__init__(msg)


def parse_key_file(pin: str, p: Path) -> Tuple[str, str]:
    with p.open('r') as fp:
        lines = fp.read().split("\n")
        if len(lines) != 4:
            raise KeyFileError("Corrupted keyfile: Expected 4 lines")
        label = lines[1]
        salt = urlsafe_b64decode(lines[2])
        encrypted_setupkey = urlsafe_b64decode(lines[3])

        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=32,
            salt=salt,
            iterations=480000,
        )
        key = urlsafe_b64encode(kdf.derive(pin.encode('ascii')))
        fernet = Fernet(key)
        try:
            setupkey = fernet.decrypt(encrypted_setupkey).decode('utf-8')
        except (InvalidToken, InvalidSignature):
            raise KeyFileError("Invalid PIN.")
        return label, setupkey

def parse_key_dir(pin: str) -> Dict[str, str]:
    if not KEYDIR.is_dir():
        raise Exception("Ensure ./keys is a directory.")
    ret = {}
    for p in KEYDIR.iterdir():
        if p.is_file():
            try:
                label, setupkey = parse_key_file(pin, p)
                ret[label] = setupkey
            except KeyFileError:
                print(f"Warning: Invalid PIN for {str(p)}")
    return ret

def create_key_file(pin: str, label: str, setupkey: str) -> Path:
    # Create KEYDIR if not exists
    KEYDIR.mkdir(exist_ok=True)

    # Generate file
    attempts = 5
    p = KEYDIR.joinpath(uuid4().hex)
    while p.exists():
        if attempts == 0:
            raise Exception("Could not create key file: Unable to generate unique file name.")
        p = Path(uuid4().hex)

    # Generate encryption key
    salt = urandom(16)
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=480000,
    )
    key = urlsafe_b64encode(kdf.derive(pin.encode('ascii')))
    fernet = Fernet(key)
    encrypted_key = fernet.encrypt(setupkey.encode('utf-8'))

    with p.open('w') as fp:
        fp.write(WARNING + "\n")
        fp.write(label + "\n")
        fp.write(urlsafe_b64encode(salt).decode('utf-8') + "\n")
        fp.write(urlsafe_b64encode(encrypted_key).decode('utf-8'))

    return p